use std::str::FromStr;
use crate::ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op,NextTier>: Box<Expression<'input>> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expression::Op(<>)),
    NextTier
};

// Main expression grammar

pub Program: Program<'input> = {
    (<Function>)* => Program{functions: <>}
}

// Function grammar

Function: Function<'input> = {
    <definition: FunctionDefinition> <body:Expression> <tests:Tests?> => Function {
        definition: definition,
        body: body,
        tests: if let Some(tests) = tests { tests } else { vec![] }
    }
};

FunctionDefinition: FunctionDefinition<'input> = {
    "egg " <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> "(" <params:(Parameter)*> ")" => FunctionDefinition {
        name: name,
        params: params,
    },
    "ü•ö " <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> "(" <params:(Parameter)*> ")" => FunctionDefinition {
        name: name,
        params: params,
    }
};

Parameter: Parameter<'input> = {
    <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> => Parameter {
        name: name,
    }
};

Tests: Vec<Test<'input>> = {
    "[" <test:Comma<Test>> "]" => <>,
};

Test: Test<'input> = {
    <input_expr:Expression> "=" <output_expr:Expression> => Test {
        input: input_expr,
        output: output_expr,
    }
};

// Expression grammar
Statement: Statement<'input> = {
    "let " <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> "=" <e:Expression> ";" => 
        Statement::Let(Let{name, value: e}),
    "*)>" <e:Expression> ";" => Statement::Return(e),
    "üêî" <e:Expression> ";" => Statement::Return(e),
    <e:Expression> ";" => Statement::Expression(e),
    ! => { errors.push(<>); Statement::Error },
};

FunctionCall: FunctionCall<'input> = {
    <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> "(" <args:Comma<Expression>> ")" => FunctionCall {
        name: name,
        args: args,
    }
};


// --------------- math -------------------------------------------------------

Expression = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Expr>;

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Expr: Box<Expression<'input>> = {
    Num => Box::new(Expression::Number(<>)),
    "(" <Expression> ")",
    "{" <s:(Statement)*> "}" => Box::new(Expression::Block(s)),
    <FunctionCall> => Box::new(Expression::FunctionCall(<>)),
    r"[a-zA-Z\{Emoji}][\w\{Emoji}]*" => {
        Box::new(Expression::Variable(Variable{name: <>}))
    },
    ! => { errors.push(<>); Box::new(Expression::Error) },
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
